// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package mock_database is a generated GoMock package.
package mock

import (
	model "github.com/axiomzen/cc_BackendAPI_SanazTaheri-Boshrooyeh/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseHandler is a mock of DatabaseHandler interface
type MockDatabaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseHandlerMockRecorder
}

// MockDatabaseHandlerMockRecorder is the mock recorder for MockDatabaseHandler
type MockDatabaseHandlerMockRecorder struct {
	mock *MockDatabaseHandler
}

// NewMockDatabaseHandler creates a new mock instance
func NewMockDatabaseHandler(ctrl *gomock.Controller) *MockDatabaseHandler {
	mock := &MockDatabaseHandler{ctrl: ctrl}
	mock.recorder = &MockDatabaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseHandler) EXPECT() *MockDatabaseHandlerMockRecorder {
	return m.recorder
}

// CreateUserTable mocks base method
func (m *MockDatabaseHandler) CreateUserTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserTable indicates an expected call of CreateUserTable
func (mr *MockDatabaseHandlerMockRecorder) CreateUserTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTable", reflect.TypeOf((*MockDatabaseHandler)(nil).CreateUserTable))
}

// InsertUser mocks base method
func (m *MockDatabaseHandler) InsertUser(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockDatabaseHandlerMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseHandler)(nil).InsertUser), arg0)
}

// UpdateUser mocks base method
func (m *MockDatabaseHandler) UpdateUser(arg0 model.User, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockDatabaseHandlerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabaseHandler)(nil).UpdateUser), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockDatabaseHandler) GetUsers() (model.UserPublicList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(model.UserPublicList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockDatabaseHandlerMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockDatabaseHandler)(nil).GetUsers))
}

// AuthenticateUser mocks base method
func (m *MockDatabaseHandler) AuthenticateUser(arg0 model.LoginCredentials) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser
func (mr *MockDatabaseHandlerMockRecorder) AuthenticateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockDatabaseHandler)(nil).AuthenticateUser), arg0)
}
